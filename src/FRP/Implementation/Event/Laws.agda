open import Level
open import FRP.Time.DecOrderedGroup

module FRP.Implementation.Event.Laws
  {a ‚Ñì : Level}
  (Time : DecOrderedGroup a ‚Ñì ‚Ñì)
  where

open import Algebra using (RawMonoid)
open import Algebra.Morphism.Structures using (module MagmaMorphisms; module MonoidMorphisms)
open import Effect.Functor as F using ()
open import Effect.Applicative as A using ()
open import Relation.Binary.PropositionalEquality using (refl; cong)

open import FRP.Implementation.Event.Type Time using (occs)
open import FRP.Implementation.Event.Raw Time as E using ()
open import FRP.Semantics.Event.Raw Time as E‚Çõ using ()


module EventMorphisms (A : Set a) where
    open import Relation.Binary.Morphism.Structures using (IsRelHomomorphism)
    open MonoidMorphisms (E.event-rawMonoid A) (E‚Çõ.event-rawMonoid A)
    open RawMonoid (E.event-rawMonoid A) renaming
      ( _‚âà_ to _‚âà‚ÇÅ_
      ; _‚àô_ to _‚àô‚ÇÅ_
      ; Œµ to Œµ‚ÇÅ
      ; rawMagma to rawMagmaE
      )
    open RawMonoid (E‚Çõ.event-rawMonoid A) renaming
      ( _‚âà_ to _‚âà‚ÇÇ_
      ; _‚àô_ to _‚àô‚ÇÇ_
      ; Œµ to Œµ‚ÇÇ
      ; rawMagma to rawMagmaùîº
      )
    open MagmaMorphisms rawMagmaE rawMagmaùîº

    occs-isRelHomomorphism : IsRelHomomorphism _‚âà‚ÇÅ_ _‚âà‚ÇÇ_ occs
    occs-isRelHomomorphism = record { cong = cong occs }

    occs-isMagmaHomomorphism : IsMagmaHomomorphism occs
    occs-isMagmaHomomorphism = record
        { isRelHomomorphism = occs-isRelHomomorphism
        ; homo = Œª x y ‚Üí refl
        }

    occs-isMonoidHomomorphism : IsMonoidHomomorphism occs
    occs-isMonoidHomomorphism = record
        { isMagmaHomomorphism = occs-isMagmaHomomorphism
        ; Œµ-homo = refl
        }

    occs-functorMorphism : F.Morphism E.event-rawFunctor E‚Çõ.event-rawFunctor
    occs-functorMorphism = record
      { op = occs
      ; op-<$> = Œª f x ‚Üí refl
      }

--     occs-applicativeMorphism : A.Morphism E.event-rawApplicative E‚Çõ-event-rawApplicative
--     occs-applicativeMorphism = record
--       { functorMorphism = occs-functorMorphism
--       ; op-pure = Œª x ‚Üí refl
--       ; op-<*> = Œª f x ‚Üí refl
--       }
-- 
--     occs-monadMorphism : M.Morphism E.event-rawMonad E‚Çõ-event-rawMonad
--     occs-monadMorphism = record
--       {
--       }
